//
//Copyright Â© 2021 Yugabyte Support
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.18.1
// source: yugatool/healthcheck/cdc.proto

package healthcheck

import (
	common "github.com/yugabyte/yb-tools/yugatool/api/yb/common"
	master "github.com/yugabyte/yb-tools/yugatool/api/yb/master"
	util "github.com/yugabyte/yb-tools/yugatool/api/yb/util"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CDCProducerStreamReportPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Table               *master.TableIdentifierPB           `protobuf:"bytes,1,req,name=table" json:"table,omitempty"`
	ConsumerTableId     *string                             `protobuf:"bytes,2,req,name=consumer_table_id,json=consumerTableId" json:"consumer_table_id,omitempty"`
	ProducerTableId     *string                             `protobuf:"bytes,3,req,name=producer_table_id,json=producerTableId" json:"producer_table_id,omitempty"`
	StreamId            *string                             `protobuf:"bytes,4,req,name=stream_id,json=streamId" json:"stream_id,omitempty"`
	ConsumerTabletCount *uint32                             `protobuf:"varint,5,req,name=consumer_tablet_count,json=consumerTabletCount" json:"consumer_tablet_count,omitempty"`
	ProducerTabletCount *uint32                             `protobuf:"varint,6,req,name=producer_tablet_count,json=producerTabletCount" json:"producer_tablet_count,omitempty"`
	Errors              *CDCProducerStreamReportPBErrorlist `protobuf:"bytes,7,opt,name=errors" json:"errors,omitempty"`
}

func (x *CDCProducerStreamReportPB) Reset() {
	*x = CDCProducerStreamReportPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yugatool_healthcheck_cdc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDCProducerStreamReportPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDCProducerStreamReportPB) ProtoMessage() {}

func (x *CDCProducerStreamReportPB) ProtoReflect() protoreflect.Message {
	mi := &file_yugatool_healthcheck_cdc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDCProducerStreamReportPB.ProtoReflect.Descriptor instead.
func (*CDCProducerStreamReportPB) Descriptor() ([]byte, []int) {
	return file_yugatool_healthcheck_cdc_proto_rawDescGZIP(), []int{0}
}

func (x *CDCProducerStreamReportPB) GetTable() *master.TableIdentifierPB {
	if x != nil {
		return x.Table
	}
	return nil
}

func (x *CDCProducerStreamReportPB) GetConsumerTableId() string {
	if x != nil && x.ConsumerTableId != nil {
		return *x.ConsumerTableId
	}
	return ""
}

func (x *CDCProducerStreamReportPB) GetProducerTableId() string {
	if x != nil && x.ProducerTableId != nil {
		return *x.ProducerTableId
	}
	return ""
}

func (x *CDCProducerStreamReportPB) GetStreamId() string {
	if x != nil && x.StreamId != nil {
		return *x.StreamId
	}
	return ""
}

func (x *CDCProducerStreamReportPB) GetConsumerTabletCount() uint32 {
	if x != nil && x.ConsumerTabletCount != nil {
		return *x.ConsumerTabletCount
	}
	return 0
}

func (x *CDCProducerStreamReportPB) GetProducerTabletCount() uint32 {
	if x != nil && x.ProducerTabletCount != nil {
		return *x.ProducerTabletCount
	}
	return 0
}

func (x *CDCProducerStreamReportPB) GetErrors() *CDCProducerStreamReportPBErrorlist {
	if x != nil {
		return x.Errors
	}
	return nil
}

type CDCProducerReportPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProducerId              *string                       `protobuf:"bytes,1,req,name=producer_id,json=producerId" json:"producer_id,omitempty"`
	ProducerMasterAddresses []*common.HostPortPB          `protobuf:"bytes,2,rep,name=producer_master_addresses,json=producerMasterAddresses" json:"producer_master_addresses,omitempty"`
	Errors                  *CDCProducerReportPBErrorlist `protobuf:"bytes,3,opt,name=errors" json:"errors,omitempty"`
}

func (x *CDCProducerReportPB) Reset() {
	*x = CDCProducerReportPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yugatool_healthcheck_cdc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDCProducerReportPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDCProducerReportPB) ProtoMessage() {}

func (x *CDCProducerReportPB) ProtoReflect() protoreflect.Message {
	mi := &file_yugatool_healthcheck_cdc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDCProducerReportPB.ProtoReflect.Descriptor instead.
func (*CDCProducerReportPB) Descriptor() ([]byte, []int) {
	return file_yugatool_healthcheck_cdc_proto_rawDescGZIP(), []int{1}
}

func (x *CDCProducerReportPB) GetProducerId() string {
	if x != nil && x.ProducerId != nil {
		return *x.ProducerId
	}
	return ""
}

func (x *CDCProducerReportPB) GetProducerMasterAddresses() []*common.HostPortPB {
	if x != nil {
		return x.ProducerMasterAddresses
	}
	return nil
}

func (x *CDCProducerReportPB) GetErrors() *CDCProducerReportPBErrorlist {
	if x != nil {
		return x.Errors
	}
	return nil
}

type CDCReplicatedIndexPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tablet             *string      `protobuf:"bytes,1,req,name=tablet" json:"tablet,omitempty"`
	LatestOpid         *util.OpIdPB `protobuf:"bytes,2,req,name=latest_opid,json=latestOpid" json:"latest_opid,omitempty"`
	CheckpointLocation *util.OpIdPB `protobuf:"bytes,3,req,name=checkpoint_location,json=checkpointLocation" json:"checkpoint_location,omitempty"`
}

func (x *CDCReplicatedIndexPB) Reset() {
	*x = CDCReplicatedIndexPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yugatool_healthcheck_cdc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDCReplicatedIndexPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDCReplicatedIndexPB) ProtoMessage() {}

func (x *CDCReplicatedIndexPB) ProtoReflect() protoreflect.Message {
	mi := &file_yugatool_healthcheck_cdc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDCReplicatedIndexPB.ProtoReflect.Descriptor instead.
func (*CDCReplicatedIndexPB) Descriptor() ([]byte, []int) {
	return file_yugatool_healthcheck_cdc_proto_rawDescGZIP(), []int{2}
}

func (x *CDCReplicatedIndexPB) GetTablet() string {
	if x != nil && x.Tablet != nil {
		return *x.Tablet
	}
	return ""
}

func (x *CDCReplicatedIndexPB) GetLatestOpid() *util.OpIdPB {
	if x != nil {
		return x.LatestOpid
	}
	return nil
}

func (x *CDCReplicatedIndexPB) GetCheckpointLocation() *util.OpIdPB {
	if x != nil {
		return x.CheckpointLocation
	}
	return nil
}

type CDCReplicatedIndexListPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplicatedIndexList []*CDCReplicatedIndexPB `protobuf:"bytes,1,rep,name=replicated_index_list,json=replicatedIndexList" json:"replicated_index_list,omitempty"`
}

func (x *CDCReplicatedIndexListPB) Reset() {
	*x = CDCReplicatedIndexListPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yugatool_healthcheck_cdc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDCReplicatedIndexListPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDCReplicatedIndexListPB) ProtoMessage() {}

func (x *CDCReplicatedIndexListPB) ProtoReflect() protoreflect.Message {
	mi := &file_yugatool_healthcheck_cdc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDCReplicatedIndexListPB.ProtoReflect.Descriptor instead.
func (*CDCReplicatedIndexListPB) Descriptor() ([]byte, []int) {
	return file_yugatool_healthcheck_cdc_proto_rawDescGZIP(), []int{3}
}

func (x *CDCReplicatedIndexListPB) GetReplicatedIndexList() []*CDCReplicatedIndexPB {
	if x != nil {
		return x.ReplicatedIndexList
	}
	return nil
}

// TODO: should reimplemented to be a list of app status errors
type CDCProducerStreamReportPBErrorlist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsumerSchemaError       *master.MasterErrorPB     `protobuf:"bytes,1,opt,name=consumer_schema_error,json=consumerSchemaError" json:"consumer_schema_error,omitempty"`
	ProducerSchemaError       *master.MasterErrorPB     `protobuf:"bytes,2,opt,name=producer_schema_error,json=producerSchemaError" json:"producer_schema_error,omitempty"`
	SchemaMismatchError       *master.MasterErrorPB     `protobuf:"bytes,8,opt,name=schema_mismatch_error,json=schemaMismatchError" json:"schema_mismatch_error,omitempty"`
	MissingTabletsConsumer    []string                  `protobuf:"bytes,3,rep,name=missing_tablets_consumer,json=missingTabletsConsumer" json:"missing_tablets_consumer,omitempty"`
	MissingTabletsProducer    []string                  `protobuf:"bytes,4,rep,name=missing_tablets_producer,json=missingTabletsProducer" json:"missing_tablets_producer,omitempty"`
	TabletsWithReplicationLag *CDCReplicatedIndexListPB `protobuf:"bytes,7,req,name=tablets_with_replication_lag,json=tabletsWithReplicationLag" json:"tablets_with_replication_lag,omitempty"`
}

func (x *CDCProducerStreamReportPBErrorlist) Reset() {
	*x = CDCProducerStreamReportPBErrorlist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yugatool_healthcheck_cdc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDCProducerStreamReportPBErrorlist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDCProducerStreamReportPBErrorlist) ProtoMessage() {}

func (x *CDCProducerStreamReportPBErrorlist) ProtoReflect() protoreflect.Message {
	mi := &file_yugatool_healthcheck_cdc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDCProducerStreamReportPBErrorlist.ProtoReflect.Descriptor instead.
func (*CDCProducerStreamReportPBErrorlist) Descriptor() ([]byte, []int) {
	return file_yugatool_healthcheck_cdc_proto_rawDescGZIP(), []int{0, 0}
}

func (x *CDCProducerStreamReportPBErrorlist) GetConsumerSchemaError() *master.MasterErrorPB {
	if x != nil {
		return x.ConsumerSchemaError
	}
	return nil
}

func (x *CDCProducerStreamReportPBErrorlist) GetProducerSchemaError() *master.MasterErrorPB {
	if x != nil {
		return x.ProducerSchemaError
	}
	return nil
}

func (x *CDCProducerStreamReportPBErrorlist) GetSchemaMismatchError() *master.MasterErrorPB {
	if x != nil {
		return x.SchemaMismatchError
	}
	return nil
}

func (x *CDCProducerStreamReportPBErrorlist) GetMissingTabletsConsumer() []string {
	if x != nil {
		return x.MissingTabletsConsumer
	}
	return nil
}

func (x *CDCProducerStreamReportPBErrorlist) GetMissingTabletsProducer() []string {
	if x != nil {
		return x.MissingTabletsProducer
	}
	return nil
}

func (x *CDCProducerStreamReportPBErrorlist) GetTabletsWithReplicationLag() *CDCReplicatedIndexListPB {
	if x != nil {
		return x.TabletsWithReplicationLag
	}
	return nil
}

// TODO: should reimplemented to be a list of app status errors
type CDCProducerReportPBErrorlist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MastersReferenceSelf *bool                        `protobuf:"varint,1,opt,name=masters_reference_self,json=mastersReferenceSelf" json:"masters_reference_self,omitempty"`
	StreamReports        []*CDCProducerStreamReportPB `protobuf:"bytes,2,rep,name=stream_reports,json=streamReports" json:"stream_reports,omitempty"`
}

func (x *CDCProducerReportPBErrorlist) Reset() {
	*x = CDCProducerReportPBErrorlist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yugatool_healthcheck_cdc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDCProducerReportPBErrorlist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDCProducerReportPBErrorlist) ProtoMessage() {}

func (x *CDCProducerReportPBErrorlist) ProtoReflect() protoreflect.Message {
	mi := &file_yugatool_healthcheck_cdc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDCProducerReportPBErrorlist.ProtoReflect.Descriptor instead.
func (*CDCProducerReportPBErrorlist) Descriptor() ([]byte, []int) {
	return file_yugatool_healthcheck_cdc_proto_rawDescGZIP(), []int{1, 0}
}

func (x *CDCProducerReportPBErrorlist) GetMastersReferenceSelf() bool {
	if x != nil && x.MastersReferenceSelf != nil {
		return *x.MastersReferenceSelf
	}
	return false
}

func (x *CDCProducerReportPBErrorlist) GetStreamReports() []*CDCProducerStreamReportPB {
	if x != nil {
		return x.StreamReports
	}
	return nil
}

var File_yugatool_healthcheck_cdc_proto protoreflect.FileDescriptor

var file_yugatool_healthcheck_cdc_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x79, 0x75, 0x67, 0x61, 0x74, 0x6f, 0x6f, 0x6c, 0x2f, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2f, 0x63, 0x64, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x14, 0x79, 0x75, 0x67, 0x61, 0x74, 0x6f, 0x6f, 0x6c, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x1a, 0x16, 0x79, 0x62, 0x2f, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16,
	0x79, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x79, 0x62, 0x2f, 0x75, 0x74, 0x69, 0x6c, 0x2f,
	0x6f, 0x70, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdc, 0x06, 0x0a, 0x19, 0x43,
	0x44, 0x43, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x42, 0x12, 0x32, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x50, 0x42, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49,
	0x64, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0d,
	0x52, 0x13, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x72, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x02, 0x28, 0x0d, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x51, 0x0a, 0x06, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x79, 0x75, 0x67, 0x61,
	0x74, 0x6f, 0x6f, 0x6c, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x2e, 0x43, 0x44, 0x43, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x42, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x6c, 0x69, 0x73, 0x74, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x1a, 0xda, 0x03, 0x0a,
	0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x15, 0x63, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x50, 0x42, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x4c, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x72, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50,
	0x42, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x4c, 0x0a, 0x15, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x5f, 0x6d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52,
	0x13, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x38, 0x0a, 0x18, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x12, 0x38,
	0x0a, 0x18, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x73, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x16, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x12, 0x6f, 0x0a, 0x1c, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x74, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x61, 0x67, 0x18, 0x07, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x79, 0x75, 0x67, 0x61, 0x74, 0x6f, 0x6f, 0x6c, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x43, 0x44, 0x43, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x42, 0x52, 0x19,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x67, 0x22, 0xeb, 0x02, 0x0a, 0x13, 0x43, 0x44,
	0x43, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x50,
	0x42, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x4a, 0x0a, 0x19, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x5f, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x79, 0x62, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x50,
	0x6f, 0x72, 0x74, 0x50, 0x42, 0x52, 0x17, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x4d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x4b,
	0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x79, 0x75, 0x67, 0x61, 0x74, 0x6f, 0x6f, 0x6c, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x43, 0x44, 0x43, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x42, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x6c,
	0x69, 0x73, 0x74, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x1a, 0x99, 0x01, 0x0a, 0x09,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x73,
	0x65, 0x6c, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x6c, 0x66, 0x12,
	0x56, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x79, 0x75, 0x67, 0x61, 0x74, 0x6f,
	0x6f, 0x6c, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x43,
	0x44, 0x43, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x42, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x22, 0x98, 0x01, 0x0a, 0x14, 0x43, 0x44, 0x43, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x42,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x12, 0x2b, 0x0a, 0x0b, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x6f, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x79, 0x62, 0x2e, 0x4f, 0x70, 0x49, 0x64, 0x50, 0x42, 0x52, 0x0a, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x4f, 0x70, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x13, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x79, 0x62, 0x2e, 0x4f, 0x70, 0x49, 0x64, 0x50, 0x42, 0x52, 0x12,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x7a, 0x0a, 0x18, 0x43, 0x44, 0x43, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x42, 0x12, 0x5e,
	0x0a, 0x15, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x79, 0x75, 0x67, 0x61, 0x74, 0x6f, 0x6f, 0x6c, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x2e, 0x43, 0x44, 0x43, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x42, 0x52, 0x13, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x1a,
	0x0a, 0x18, 0x6f, 0x72, 0x67, 0x2e, 0x79, 0x75, 0x67, 0x61, 0x74, 0x6f, 0x6f, 0x6c, 0x2e, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b,
}

var (
	file_yugatool_healthcheck_cdc_proto_rawDescOnce sync.Once
	file_yugatool_healthcheck_cdc_proto_rawDescData = file_yugatool_healthcheck_cdc_proto_rawDesc
)

func file_yugatool_healthcheck_cdc_proto_rawDescGZIP() []byte {
	file_yugatool_healthcheck_cdc_proto_rawDescOnce.Do(func() {
		file_yugatool_healthcheck_cdc_proto_rawDescData = protoimpl.X.CompressGZIP(file_yugatool_healthcheck_cdc_proto_rawDescData)
	})
	return file_yugatool_healthcheck_cdc_proto_rawDescData
}

var file_yugatool_healthcheck_cdc_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_yugatool_healthcheck_cdc_proto_goTypes = []interface{}{
	(*CDCProducerStreamReportPB)(nil),          // 0: yugatool.healthcheck.CDCProducerStreamReportPB
	(*CDCProducerReportPB)(nil),                // 1: yugatool.healthcheck.CDCProducerReportPB
	(*CDCReplicatedIndexPB)(nil),               // 2: yugatool.healthcheck.CDCReplicatedIndexPB
	(*CDCReplicatedIndexListPB)(nil),           // 3: yugatool.healthcheck.CDCReplicatedIndexListPB
	(*CDCProducerStreamReportPBErrorlist)(nil), // 4: yugatool.healthcheck.CDCProducerStreamReportPB.errorlist
	(*CDCProducerReportPBErrorlist)(nil),       // 5: yugatool.healthcheck.CDCProducerReportPB.errorlist
	(*master.TableIdentifierPB)(nil),           // 6: yb.master.TableIdentifierPB
	(*common.HostPortPB)(nil),                  // 7: yb.HostPortPB
	(*util.OpIdPB)(nil),                        // 8: yb.OpIdPB
	(*master.MasterErrorPB)(nil),               // 9: yb.master.MasterErrorPB
}
var file_yugatool_healthcheck_cdc_proto_depIdxs = []int32{
	6,  // 0: yugatool.healthcheck.CDCProducerStreamReportPB.table:type_name -> yb.master.TableIdentifierPB
	4,  // 1: yugatool.healthcheck.CDCProducerStreamReportPB.errors:type_name -> yugatool.healthcheck.CDCProducerStreamReportPB.errorlist
	7,  // 2: yugatool.healthcheck.CDCProducerReportPB.producer_master_addresses:type_name -> yb.HostPortPB
	5,  // 3: yugatool.healthcheck.CDCProducerReportPB.errors:type_name -> yugatool.healthcheck.CDCProducerReportPB.errorlist
	8,  // 4: yugatool.healthcheck.CDCReplicatedIndexPB.latest_opid:type_name -> yb.OpIdPB
	8,  // 5: yugatool.healthcheck.CDCReplicatedIndexPB.checkpoint_location:type_name -> yb.OpIdPB
	2,  // 6: yugatool.healthcheck.CDCReplicatedIndexListPB.replicated_index_list:type_name -> yugatool.healthcheck.CDCReplicatedIndexPB
	9,  // 7: yugatool.healthcheck.CDCProducerStreamReportPB.errorlist.consumer_schema_error:type_name -> yb.master.MasterErrorPB
	9,  // 8: yugatool.healthcheck.CDCProducerStreamReportPB.errorlist.producer_schema_error:type_name -> yb.master.MasterErrorPB
	9,  // 9: yugatool.healthcheck.CDCProducerStreamReportPB.errorlist.schema_mismatch_error:type_name -> yb.master.MasterErrorPB
	3,  // 10: yugatool.healthcheck.CDCProducerStreamReportPB.errorlist.tablets_with_replication_lag:type_name -> yugatool.healthcheck.CDCReplicatedIndexListPB
	0,  // 11: yugatool.healthcheck.CDCProducerReportPB.errorlist.stream_reports:type_name -> yugatool.healthcheck.CDCProducerStreamReportPB
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_yugatool_healthcheck_cdc_proto_init() }
func file_yugatool_healthcheck_cdc_proto_init() {
	if File_yugatool_healthcheck_cdc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_yugatool_healthcheck_cdc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDCProducerStreamReportPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yugatool_healthcheck_cdc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDCProducerReportPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yugatool_healthcheck_cdc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDCReplicatedIndexPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yugatool_healthcheck_cdc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDCReplicatedIndexListPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yugatool_healthcheck_cdc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDCProducerStreamReportPBErrorlist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yugatool_healthcheck_cdc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDCProducerReportPBErrorlist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yugatool_healthcheck_cdc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yugatool_healthcheck_cdc_proto_goTypes,
		DependencyIndexes: file_yugatool_healthcheck_cdc_proto_depIdxs,
		MessageInfos:      file_yugatool_healthcheck_cdc_proto_msgTypes,
	}.Build()
	File_yugatool_healthcheck_cdc_proto = out.File
	file_yugatool_healthcheck_cdc_proto_rawDesc = nil
	file_yugatool_healthcheck_cdc_proto_goTypes = nil
	file_yugatool_healthcheck_cdc_proto_depIdxs = nil
}
