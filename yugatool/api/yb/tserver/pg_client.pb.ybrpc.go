// Copyright (c) YugaByte, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied.  See the License for the specific language governing permissions and limitations
// under the License.
//

// Code generated by protoc-gen-ybrpc. DO NOT EDIT.

package tserver

import (
	"github.com/go-logr/logr"
	"github.com/yugabyte/yb-tools/protoc-gen-ybrpc/pkg/message"
)

// service: yb.tserver.PgClientService
// service: PgClientService
type PgClientService interface {
	Heartbeat(request *PgHeartbeatRequestPB) (*PgHeartbeatResponsePB, error)
	AlterDatabase(request *PgAlterDatabaseRequestPB) (*PgAlterDatabaseResponsePB, error)
	AlterTable(request *PgAlterTableRequestPB) (*PgAlterTableResponsePB, error)
	BackfillIndex(request *PgBackfillIndexRequestPB) (*PgBackfillIndexResponsePB, error)
	CreateDatabase(request *PgCreateDatabaseRequestPB) (*PgCreateDatabaseResponsePB, error)
	CreateSequencesDataTable(request *PgCreateSequencesDataTableRequestPB) (*PgCreateSequencesDataTableResponsePB, error)
	CreateTable(request *PgCreateTableRequestPB) (*PgCreateTableResponsePB, error)
	CreateTablegroup(request *PgCreateTablegroupRequestPB) (*PgCreateTablegroupResponsePB, error)
	DropDatabase(request *PgDropDatabaseRequestPB) (*PgDropDatabaseResponsePB, error)
	DropTable(request *PgDropTableRequestPB) (*PgDropTableResponsePB, error)
	DropTablegroup(request *PgDropTablegroupRequestPB) (*PgDropTablegroupResponsePB, error)
	GetCatalogMasterVersion(request *PgGetCatalogMasterVersionRequestPB) (*PgGetCatalogMasterVersionResponsePB, error)
	GetDatabaseInfo(request *PgGetDatabaseInfoRequestPB) (*PgGetDatabaseInfoResponsePB, error)
	IsInitDbDone(request *PgIsInitDbDoneRequestPB) (*PgIsInitDbDoneResponsePB, error)
	ListLiveTabletServers(request *PgListLiveTabletServersRequestPB) (*PgListLiveTabletServersResponsePB, error)
	OpenTable(request *PgOpenTableRequestPB) (*PgOpenTableResponsePB, error)
	ReserveOids(request *PgReserveOidsRequestPB) (*PgReserveOidsResponsePB, error)
	TabletServerCount(request *PgTabletServerCountRequestPB) (*PgTabletServerCountResponsePB, error)
	TruncateTable(request *PgTruncateTableRequestPB) (*PgTruncateTableResponsePB, error)
}

type PgClientServiceImpl struct {
	Log       logr.Logger
	Messenger message.Messenger
}

func (s *PgClientServiceImpl) Heartbeat(request *PgHeartbeatRequestPB) (*PgHeartbeatResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.PgClientService", "method", "Heartbeat", "request", request)
	response := &PgHeartbeatResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.PgClientService", "Heartbeat", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.PgClientService", "method", "Heartbeat", "response", response)

	return response, nil
}

func (s *PgClientServiceImpl) AlterDatabase(request *PgAlterDatabaseRequestPB) (*PgAlterDatabaseResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.PgClientService", "method", "AlterDatabase", "request", request)
	response := &PgAlterDatabaseResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.PgClientService", "AlterDatabase", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.PgClientService", "method", "AlterDatabase", "response", response)

	return response, nil
}

func (s *PgClientServiceImpl) AlterTable(request *PgAlterTableRequestPB) (*PgAlterTableResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.PgClientService", "method", "AlterTable", "request", request)
	response := &PgAlterTableResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.PgClientService", "AlterTable", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.PgClientService", "method", "AlterTable", "response", response)

	return response, nil
}

func (s *PgClientServiceImpl) BackfillIndex(request *PgBackfillIndexRequestPB) (*PgBackfillIndexResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.PgClientService", "method", "BackfillIndex", "request", request)
	response := &PgBackfillIndexResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.PgClientService", "BackfillIndex", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.PgClientService", "method", "BackfillIndex", "response", response)

	return response, nil
}

func (s *PgClientServiceImpl) CreateDatabase(request *PgCreateDatabaseRequestPB) (*PgCreateDatabaseResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.PgClientService", "method", "CreateDatabase", "request", request)
	response := &PgCreateDatabaseResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.PgClientService", "CreateDatabase", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.PgClientService", "method", "CreateDatabase", "response", response)

	return response, nil
}

func (s *PgClientServiceImpl) CreateSequencesDataTable(request *PgCreateSequencesDataTableRequestPB) (*PgCreateSequencesDataTableResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.PgClientService", "method", "CreateSequencesDataTable", "request", request)
	response := &PgCreateSequencesDataTableResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.PgClientService", "CreateSequencesDataTable", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.PgClientService", "method", "CreateSequencesDataTable", "response", response)

	return response, nil
}

func (s *PgClientServiceImpl) CreateTable(request *PgCreateTableRequestPB) (*PgCreateTableResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.PgClientService", "method", "CreateTable", "request", request)
	response := &PgCreateTableResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.PgClientService", "CreateTable", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.PgClientService", "method", "CreateTable", "response", response)

	return response, nil
}

func (s *PgClientServiceImpl) CreateTablegroup(request *PgCreateTablegroupRequestPB) (*PgCreateTablegroupResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.PgClientService", "method", "CreateTablegroup", "request", request)
	response := &PgCreateTablegroupResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.PgClientService", "CreateTablegroup", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.PgClientService", "method", "CreateTablegroup", "response", response)

	return response, nil
}

func (s *PgClientServiceImpl) DropDatabase(request *PgDropDatabaseRequestPB) (*PgDropDatabaseResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.PgClientService", "method", "DropDatabase", "request", request)
	response := &PgDropDatabaseResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.PgClientService", "DropDatabase", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.PgClientService", "method", "DropDatabase", "response", response)

	return response, nil
}

func (s *PgClientServiceImpl) DropTable(request *PgDropTableRequestPB) (*PgDropTableResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.PgClientService", "method", "DropTable", "request", request)
	response := &PgDropTableResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.PgClientService", "DropTable", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.PgClientService", "method", "DropTable", "response", response)

	return response, nil
}

func (s *PgClientServiceImpl) DropTablegroup(request *PgDropTablegroupRequestPB) (*PgDropTablegroupResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.PgClientService", "method", "DropTablegroup", "request", request)
	response := &PgDropTablegroupResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.PgClientService", "DropTablegroup", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.PgClientService", "method", "DropTablegroup", "response", response)

	return response, nil
}

func (s *PgClientServiceImpl) GetCatalogMasterVersion(request *PgGetCatalogMasterVersionRequestPB) (*PgGetCatalogMasterVersionResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.PgClientService", "method", "GetCatalogMasterVersion", "request", request)
	response := &PgGetCatalogMasterVersionResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.PgClientService", "GetCatalogMasterVersion", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.PgClientService", "method", "GetCatalogMasterVersion", "response", response)

	return response, nil
}

func (s *PgClientServiceImpl) GetDatabaseInfo(request *PgGetDatabaseInfoRequestPB) (*PgGetDatabaseInfoResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.PgClientService", "method", "GetDatabaseInfo", "request", request)
	response := &PgGetDatabaseInfoResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.PgClientService", "GetDatabaseInfo", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.PgClientService", "method", "GetDatabaseInfo", "response", response)

	return response, nil
}

func (s *PgClientServiceImpl) IsInitDbDone(request *PgIsInitDbDoneRequestPB) (*PgIsInitDbDoneResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.PgClientService", "method", "IsInitDbDone", "request", request)
	response := &PgIsInitDbDoneResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.PgClientService", "IsInitDbDone", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.PgClientService", "method", "IsInitDbDone", "response", response)

	return response, nil
}

func (s *PgClientServiceImpl) ListLiveTabletServers(request *PgListLiveTabletServersRequestPB) (*PgListLiveTabletServersResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.PgClientService", "method", "ListLiveTabletServers", "request", request)
	response := &PgListLiveTabletServersResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.PgClientService", "ListLiveTabletServers", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.PgClientService", "method", "ListLiveTabletServers", "response", response)

	return response, nil
}

func (s *PgClientServiceImpl) OpenTable(request *PgOpenTableRequestPB) (*PgOpenTableResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.PgClientService", "method", "OpenTable", "request", request)
	response := &PgOpenTableResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.PgClientService", "OpenTable", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.PgClientService", "method", "OpenTable", "response", response)

	return response, nil
}

func (s *PgClientServiceImpl) ReserveOids(request *PgReserveOidsRequestPB) (*PgReserveOidsResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.PgClientService", "method", "ReserveOids", "request", request)
	response := &PgReserveOidsResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.PgClientService", "ReserveOids", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.PgClientService", "method", "ReserveOids", "response", response)

	return response, nil
}

func (s *PgClientServiceImpl) TabletServerCount(request *PgTabletServerCountRequestPB) (*PgTabletServerCountResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.PgClientService", "method", "TabletServerCount", "request", request)
	response := &PgTabletServerCountResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.PgClientService", "TabletServerCount", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.PgClientService", "method", "TabletServerCount", "response", response)

	return response, nil
}

func (s *PgClientServiceImpl) TruncateTable(request *PgTruncateTableRequestPB) (*PgTruncateTableResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.PgClientService", "method", "TruncateTable", "request", request)
	response := &PgTruncateTableResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.PgClientService", "TruncateTable", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.PgClientService", "method", "TruncateTable", "response", response)

	return response, nil
}
